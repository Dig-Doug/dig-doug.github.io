webpackJsonp([0,2],{lVK7:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}n("cilB");var r=n("U7vG"),s=o(r),a=n("O27J"),i=n("4n+p"),u=n("c9Fv"),l=n("Zfgq"),c=n("jZgO"),f=n("pnOm"),d=o(f),p=n("fm7g"),h=o(p),j=n("AQOT"),v=o(j),m=n("9FmS"),b=o(m),g=(0,c.routerMiddleware)(l.browserHistory),y=(0,u.createStore)(h.default,window.devToolsExtension&&window.devToolsExtension(),(0,u.applyMiddleware)(g)),E=(0,c.syncHistoryWithStore)(l.browserHistory,y);(0,a.render)(s.default.createElement(i.Provider,{store:y},s.default.createElement(l.Router,{history:E},s.default.createElement(l.Route,{path:"/",component:d.default},s.default.createElement(l.IndexRoute,{component:b.default}),s.default.createElement(l.Route,{path:v.default.route,component:v.default})))),document.querySelector("#app"))},0:function(e,t,n){n("LA/H"),e.exports=n("lVK7")},cilB:function(e,t){},pnOm:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}t.__esModule=!0;var i,u=n("U7vG"),l=o(u),c=n("4n+p"),f=n("Extj"),d=o(f),p=n("Zfgq"),h=n("oydI"),j=o(h),v=n("9FmS"),m=o(v),b=n("AQOT"),g=o(b),y={base:{height:"100%",minHeight:400,display:"flex",flexDirection:"column",justifyContent:"stretch"}},E=l.default.createElement("h1",null,"Web Console"),w=(0,d.default)(i=function(e){function t(n){r(this,t);var o=s(this,e.call(this,n));return o.sensorService=new j.default(o.props.dispatch),o}return a(t,e),t.prototype.render=function(){return l.default.createElement("div",{style:[y.base]},l.default.createElement("div",null,E,l.default.createElement(p.Link,{to:m.default.url()},"Connection"),l.default.createElement(p.Link,{to:g.default.url()},"Sensors")),this.props.children&&l.default.cloneElement(this.props.children,{sensorService:this.sensorService}))},t}(u.Component))||i;w.contextTypes={router:l.default.PropTypes.object};var C=function(e,t){return{}},x=function(e){return{dispatch:e}},_=(0,c.connect)(C,x)(w);t.default=_,e.exports=t.default},oydI:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}t.__esModule=!0,n("fRVp");var s=n("jZgO"),a=n("I/sF"),i=n("9FmS"),u=o(i),l=n("AQOT"),c=o(l),f=n("pDKf"),d=o(f),p=function e(t){var n=this;r(this,e),this.connect=function(e,t,o){o?(o.startsWith("/")||(o="/"+o),n.destination=o+"/#",n.prefixSize=o.split("/").length):(n.prefixSize=0,n.destination="/#"),n.client=new Paho.MQTT.Client(e,Number(t),"webconsole-"+Math.floor(1e4*Math.random())),n.client.onConnectionLost=n.onConnectionLost,n.client.onMessageArrived=n.onMessageArrived,n.client.connect({onSuccess:n.onConnect})},this.disconnect=function(){n.client.disconnect()},this.onConnect=function(){console.log("Connected"),n.client.subscribe(n.destination),n.dispatch((0,a.connected)()),n.dispatch((0,s.push)(c.default.url()))},this.onConnectionLost=function(e){0!==e.errorCode&&console.log("onConnectionLost:"+e.errorMessage),n.dispatch((0,a.disconnected)()),n.dispatch((0,s.push)(u.default.url()))},this.onMessageArrived=function(e){var t=e.destinationName.split("/");if(t=t.slice(1),t.length==n.prefixSize+4)if("group"==t[n.prefixSize])if("sensor"==t[n.prefixSize+2]){var o=t[n.prefixSize+1],r=t[n.prefixSize+3],s=e.payloadString.split(",");if(6!=s.length)console.log("Invalid sensor reading size");else{var i=new d.default({red:Number(s[0]),green:Number(s[1]),blue:Number(s[2]),white:Number(s[3]),timestamp:Number(s[4])});n.dispatch((0,a.sensorDataReceived)(o,r,i))}}else console.log("Received reading without 'sensor' present at the correct level");else console.log("Received reading without 'group' present at the correct level");else console.log("Received reading with invalid topic length")},this.dispatch=t};t.default=p,e.exports=t.default},"I/sF":function(e,t){"use strict";function n(e,t,n){return{type:s,groupId:e,sensorId:t,reading:n}}function o(){return{type:a}}function r(){return{type:i}}t.__esModule=!0,t.sensorDataReceived=n,t.connected=o,t.disconnected=r;var s=t.SENSOR_DATA_RECEIVED="SENSOR_DATA_RECEIVED",a=t.CONNECTED="CONNECTED",i=t.DISCONNECTED="DISCONNECTED"},"9FmS":function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var r=n("4n+p"),s=n("AcgS"),a=o(s),i=function(e,t){return{connected:e.isConnected}},u=function(e){return{}},l=(0,r.connect)(i,u)(a.default),c="/";l.route=c,l.url=function(){return c},t.default=l,e.exports=t.default},"4Ngq":function(e,t,n){"use strict";t.__esModule=!0,t.Sensor=void 0;var o=n("BYKG"),r=t.Sensor=(0,o.Record)({id:void 0,data:new o.List});t.default=r},AQOT:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var r=n("4n+p"),s=n("LQl5"),a=o(s),i=function(e,t){var n=[];return e.sensors.forEach(function(e,t){var o=[];e.forEach(function(e){o.push(e)}),n.push({id:t,sensors:o})}),{groups:n,isConnected:e.isConnected}},u=function(e){return{}},l=(0,r.connect)(i,u)(a.default),c="/sensors";l.route=c,l.url=function(){return c},t.default=l,e.exports=t.default},LQl5:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}t.__esModule=!0;var i,u=n("U7vG"),l=o(u),c=n("Extj"),f=o(c),d=n("+tsM"),p=o(d),h=n("9FmS"),j=(o(h),{base:{},groupBody:{display:"flex",justifyContent:"flex-start",alignItems:"flex-start",flexWrap:"wrap",alignContent:"flex-start"}}),v=l.default.createElement("option",{value:"red"},"red"),m=l.default.createElement("option",{value:"green"},"green"),b=l.default.createElement("option",{value:"blue"},"blue"),g=l.default.createElement("option",{value:"white"},"white"),y=l.default.createElement("p",null,"Not connected."),E=(0,f.default)(i=function(e){function t(n){r(this,t);var o=s(this,e.call(this,n));return o.handleColorChange=function(e){o.setState({color:e.target.value})},o.state={color:"white"},o}return a(t,e),t.prototype.componentWillMount=function(){},t.prototype.render=function(){var e=this,t=void 0;return t=this.props.isConnected?l.default.createElement("div",null,l.default.createElement("select",{value:this.state.color,onChange:this.handleColorChange},v,m,b,g),this.props.groups.map(function(t){return l.default.createElement("div",{key:t.id},l.default.createElement("h2",null,"Group: ",t.id),l.default.createElement("div",{style:[j.groupBody]},t.sensors.map(function(t){return l.default.createElement(p.default,{key:t.id,sensor:t,channels:[e.state.color]})})))})):y,l.default.createElement("div",{style:[j.base]},t)},t}(u.Component))||i;E.contextTypes={router:l.default.PropTypes.object},t.default=E,e.exports=t.default},"+tsM":function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}t.__esModule=!0;var i,u=n("U7vG"),l=o(u),c=n("Extj"),f=o(c),d=n("Rm2S"),p={base:{width:"20%",borderStyle:"solid",borderColor:"rgba(100, 100, 100, 0.1)",borderWidth:1}},h=(0,f.default)(i=function(e){function t(n){return r(this,t),s(this,e.call(this,n))}return a(t,e),t.prototype.render=function(){var e=[],t={red:[],green:[],blue:[],white:[]};this.props.sensor.data.forEach(function(n){e.push(n.timestamp),t.red.push(n.red),t.green.push(n.green),t.blue.push(n.blue),t.white.push(n.white)});for(var n={red:"rgba(255, 0, 0, 0.3)",green:"rgba(0, 255, 0, 0.3)",blue:"rgba(0, 0, 255, 0.3)",white:"rgba(100, 100, 100, 0.3)"},o=[],r=0;r<this.props.channels.length;r++){var s=this.props.channels[r];o.push({fill:!0,borderColor:n[s],backgroundColor:n[s],pointBackgroundColor:n[s],pointBorderColor:n[s],data:t[s]})}var a={labels:e,datasets:o},i={animation:{duration:0},legend:{display:!1},scales:{yAxes:[{ticks:{beginAtZero:!0,max:.5,min:0}}]}};return l.default.createElement("div",{style:[p.base]},l.default.createElement("h4",null,"Sensor: ",this.props.sensor.id),l.default.createElement(d.Line,{data:a,options:i}))},t}(u.Component))||i;t.default=h,e.exports=t.default},1:function(e,t,n){function o(e){return n(r(e))}function r(e){return s[e]||function(){throw new Error("Cannot find module '"+e+"'.")}()}var s={"./af":"3CJN","./af.js":"3CJN","./ar":"3MVc","./ar-ly":"wPpW","./ar-ly.js":"wPpW","./ar-ma":"dURR","./ar-ma.js":"dURR","./ar-sa":"7OnE","./ar-sa.js":"7OnE","./ar-tn":"BEem","./ar-tn.js":"BEem","./ar.js":"3MVc","./az":"eHwN","./az.js":"eHwN","./be":"3hfc","./be.js":"3hfc","./bg":"lOED","./bg.js":"lOED","./bn":"aM0x","./bn.js":"aM0x","./bo":"w2Hs","./bo.js":"w2Hs","./br":"OSsP","./br.js":"OSsP","./bs":"aqvp","./bs.js":"aqvp","./ca":"wIgY","./ca.js":"wIgY","./cs":"ssxj","./cs.js":"ssxj","./cv":"N3vo","./cv.js":"N3vo","./cy":"ZFGz","./cy.js":"ZFGz","./da":"YBA/","./da.js":"YBA/","./de":"DOkx","./de-at":"8v14","./de-at.js":"8v14","./de.js":"DOkx","./dv":"rIuo","./dv.js":"rIuo","./el":"CFqe","./el.js":"CFqe","./en-au":"Sjoy","./en-au.js":"Sjoy","./en-ca":"Tqun","./en-ca.js":"Tqun","./en-gb":"hPuz","./en-gb.js":"hPuz","./en-ie":"ALEw","./en-ie.js":"ALEw","./en-nz":"dyB6","./en-nz.js":"dyB6","./eo":"Nd3h","./eo.js":"Nd3h","./es":"LT9G","./es-do":"7MHZ","./es-do.js":"7MHZ","./es.js":"LT9G","./et":"XlWM","./et.js":"XlWM","./eu":"sqLM","./eu.js":"sqLM","./fa":"2pmY","./fa.js":"2pmY","./fi":"nS2h","./fi.js":"nS2h","./fo":"OVPi","./fo.js":"OVPi","./fr":"tzHd","./fr-ca":"bXQP","./fr-ca.js":"bXQP","./fr-ch":"VK9h","./fr-ch.js":"VK9h","./fr.js":"tzHd","./fy":"g7KF","./fy.js":"g7KF","./gd":"nLOz","./gd.js":"nLOz","./gl":"FuaP","./gl.js":"FuaP","./he":"Nzt2","./he.js":"Nzt2","./hi":"ETHv","./hi.js":"ETHv","./hr":"V4qH","./hr.js":"V4qH","./hu":"xne+","./hu.js":"xne+","./hy-am":"GrS7","./hy-am.js":"GrS7","./id":"yRTJ","./id.js":"yRTJ","./is":"upln","./is.js":"upln","./it":"FKXc","./it.js":"FKXc","./ja":"ORgI","./ja.js":"ORgI","./jv":"JwiF","./jv.js":"JwiF","./ka":"RnJI","./ka.js":"RnJI","./kk":"j+vx","./kk.js":"j+vx","./km":"5j66","./km.js":"5j66","./ko":"eBB/","./ko.js":"eBB/","./ky":"6cf8","./ky.js":"6cf8","./lb":"z3hR","./lb.js":"z3hR","./lo":"nE8X","./lo.js":"nE8X","./lt":"/6P1","./lt.js":"/6P1","./lv":"jxEH","./lv.js":"jxEH","./me":"svD2","./me.js":"svD2","./mi":"gEU3","./mi.js":"gEU3","./mk":"Ab7C","./mk.js":"Ab7C","./ml":"oo1B","./ml.js":"oo1B","./mr":"5vPg","./mr.js":"5vPg","./ms":"ooba","./ms-my":"G++c","./ms-my.js":"G++c","./ms.js":"ooba","./my":"F+2e","./my.js":"F+2e","./nb":"FlzV","./nb.js":"FlzV","./ne":"/mhn","./ne.js":"/mhn","./nl":"3K28","./nl.js":"3K28","./nn":"C7av","./nn.js":"C7av","./pa-in":"pfs9","./pa-in.js":"pfs9","./pl":"7LV+","./pl.js":"7LV+","./pt":"ZoSI","./pt-br":"AoDM","./pt-br.js":"AoDM","./pt.js":"ZoSI","./ro":"wT5f","./ro.js":"wT5f","./ru":"ulq9","./ru.js":"ulq9","./se":"5Omq","./se.js":"5Omq","./si":"Lgqo","./si.js":"Lgqo","./sk":"OUMt","./sk.js":"OUMt","./sl":"2s1U","./sl.js":"2s1U","./sq":"V0td","./sq.js":"V0td","./sr":"f4W3","./sr-cyrl":"c1x4","./sr-cyrl.js":"c1x4","./sr.js":"f4W3","./ss":"7Q8x","./ss.js":"7Q8x","./sv":"Fpqq","./sv.js":"Fpqq","./sw":"DSXN","./sw.js":"DSXN","./ta":"+7/x","./ta.js":"+7/x","./te":"Nlnz","./te.js":"Nlnz","./th":"XzD+","./th.js":"XzD+","./tl-ph":"3LKG","./tl-ph.js":"3LKG","./tlh":"m7yE","./tlh.js":"m7yE","./tr":"k+5o","./tr.js":"k+5o","./tzl":"iNtv","./tzl.js":"iNtv","./tzm":"FRPF","./tzm-latn":"krPU","./tzm-latn.js":"krPU","./tzm.js":"FRPF","./uk":"ntHu","./uk.js":"ntHu","./uz":"XU1s","./uz.js":"XU1s","./vi":"0X8Q","./vi.js":"0X8Q","./x-pseudo":"e/KL","./x-pseudo.js":"e/KL","./zh-cn":"Vz2w","./zh-cn.js":"Vz2w","./zh-hk":"ZUyn","./zh-hk.js":"ZUyn","./zh-tw":"BbgG","./zh-tw.js":"BbgG"};o.keys=function(){return Object.keys(s)},o.resolve=r,e.exports=o,o.id=1},pDKf:function(e,t,n){"use strict";t.__esModule=!0,t.SensorReading=void 0;var o=n("BYKG"),r=t.SensorReading=(0,o.Record)({timestamp:void 0,red:void 0,green:void 0,blue:void 0,white:void 0});t.default=r},fm7g:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function s(){var e=arguments.length<=0||void 0===arguments[0]?new l.Map:arguments[0],t=arguments[1];switch(t.type){case f.SENSOR_DATA_RECEIVED:e.has(t.groupId)||(e=e.set(t.groupId,new l.Map));var n=e.get(t.groupId);n.has(t.sensorId)||(n=n.set(t.sensorId,new p.default({id:t.sensorId})));var o=n.get(t.sensorId),r=o.data;r=r.push(t.reading);var s=30;r.size>s&&(r=r.slice(r.size-s,r.size)),o=o.set("data",r),n=n.set(o.id,o),e=e.set(t.groupId,n);break;case f.DISCONNECTED:e=new l.Map}return e}function a(){var e=!(arguments.length<=0||void 0===arguments[0])&&arguments[0],t=arguments[1];switch(t.type){case f.CONNECTED:e=!0;break;case f.DISCONNECTED:e=!1}return e}t.__esModule=!0;var i=n("jZgO"),u=n("c9Fv"),l=n("BYKG"),c=n("I/sF"),f=r(c),d=n("4Ngq"),p=o(d),h=(0,u.combineReducers)({sensors:s,isConnected:a,routing:i.routerReducer});t.default=h,e.exports=t.default},AcgS:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}t.__esModule=!0;var i,u=n("Extj"),l=o(u),c=n("U7vG"),f=o(c),d={base:{}},p=(0,l.default)(i=function(e){function t(n){r(this,t);var o=s(this,e.call(this,n));return o.handleHostChange=function(e){o.setState({host:e.target.value})},o.handlePortChange=function(e){o.setState({port:e.target.value})},o.handlePrefixChange=function(e){o.setState({prefix:e.target.value})},o.handleConnect=function(e){console.log("Connecting..."),o.props.sensorService.connect(o.state.host,o.state.port,o.state.prefix)},o.handleDisconnect=function(e){console.log("Disconnecting..."),o.props.sensorService.disconnect()},o.state={host:"localhost",port:61614,prefix:""},o}return a(t,e),t.prototype.render=function(){return this.props.connected?f.default.createElement("button",{onClick:this.handleDisconnect},"Disconnect"):f.default.createElement("div",{style:[d.base]},"Host:",f.default.createElement("input",{type:"text",value:this.state.host,onChange:this.handleHostChange}),"Port:",f.default.createElement("input",{type:"number",value:this.state.port,onChange:this.handlePortChange}),"Prefix: ",f.default.createElement("input",{type:"text",value:this.state.prefix,onChange:this.handlePrefixChange}),f.default.createElement("button",{onClick:this.handleConnect},"Connect"),"Connectionview")},t}(c.Component))||i;p.contextTypes={router:f.default.PropTypes.object},t.default=p,e.exports=t.default}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,